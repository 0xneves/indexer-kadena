"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
Floats that will have a value of 0 or more.
"""
scalar Decimal

type Subscription {
    newBlocks(chainIds: [String]!): [Block!]
    transaction(chainId: String, requestKey: String!): Transaction
    events(
        chainId: String
        minimumDepth: Int
        qualifiedEventName: String!
    ): [Event!]
    newBlocksFromDepth(chainIds: [String!]!, minimumDepth: Int!): [Block!]
}

type Query {
    block(hash: String!): Block
    blocksFromDepth(
        after: String
        before: String
        chainIds: [String!]
        first: Int = 20
        last: Int = 20
        minimumDepth: Int!
    ): QueryBlocksFromDepthConnection

    blocksFromHeight(
        after: String
        before: String
        chainIds: [String!]
        endHeight: Int
        first: Int = 20
        last: Int = 20
        startHeight: Int!
    ): QueryBlocksFromHeightConnection!

    completedBlockHeights(
        after: String
        before: String
        chainIds: [String!]
        completedHeights: Boolean = true
        first: Int = 20
        heightCount: Int = 3
        last: Int = 20
    ): QueryCompletedBlockHeightsConnection!

    events(
        after: String
        before: String
        blockHash: String
        chainId: String
        first: Int = 20
        last: Int = 20
        maxHeight: Int
        minHeight: Int
        minimumDepth: Int
        orderIndex: Int
        parametersFilter: String
        qualifiedEventName: String!
        requestKey: String
    ): QueryEventsConnection!

    """
    Retrieve an fungible specific account by its name and fungible, such as coin.
    """
    fungibleAccount(
        accountName: String!
        fungibleName: String = "coin"
    ): FungibleAccount

    """
    Retrieve an account by public key.
    """
    fungibleAccountsByPublicKey(
        fungibleName: String = "coin"
        publicKey: String!
    ): [FungibleAccount!]!

    """
    Retrieve an account by its name and fungible, such as coin, on a specific chain.
    """
    fungibleChainAccount(
        accountName: String!
        chainIds: [String!]
        fungibleName: String = "coin"
    ): [FungibleChainAccount!]!

    """
    Retrieve a chain account by public key.
    """
    fungibleChainAccountsByPublicKey(
        chainId: String!
        fungibleName: String = "coin"
        publicKey: String!
    ): [FungibleChainAccount!]!

    """
    Estimate the gas limit for one or more transactions. Throws an error when the transaction fails or is invalid. The input accepts a JSON object and based on the parameters passed it will determine what type of format it is and return the gas limit estimation. The following types are supported:

        - `full-transaction`: A complete transaction object. Required parameters: `cmd`, `hash` and `sigs`.
        - `stringified-command`: A JSON stringified command. Required parameters: `cmd`. It also optionally accepts `sigs`.
        - `full-command`: A full command. Required parameters: `payload`, `meta` and `signers`.
        - `partial-command`: A partial command. Required parameters: `payload` and either `meta` or `signers`. In case `meta` is not given, but `signers` is given, you can also add `chainId` as a parameter.
        - `payload`: A just the payload of a command. Required parameters: `payload` and `chainId`.
        - `code`: The code of an execution. Required parameters: `code` and `chainId`.

        Every type accepts an optional parameter called `networkId` to override the default value from the environment variables.

        Example of the input needed for a type `code` query: `gasLimitEstimate(input: "{\"code\":\"(coin.details \\\"k:1234\\\")\",\"chainId\":\"3\"}")`
    """
    gasLimitEstimate(input: [String!]!): [GasLimitEstimation!]!

    """
    Get the configuration of the graph.
    """
    graphConfiguration: GraphConfiguration!

    """
    Get the height of the block with the highest height.
    """
    lastBlockHeight: BigInt

    """
    Get information about the network.
    """
    networkInfo: NetworkInfo
    node(id: ID!): Node

    nodes(ids: [ID!]!): [Node]!

    """
    Retrieve a non-fungible specific account by its name.
    """
    nonFungibleAccount(accountName: String!): NonFungibleAccount

    """
    Retrieve an account by its name on a specific chain.
    """
    nonFungibleChainAccount(
        accountName: String!
        chainId: String!
    ): NonFungibleChainAccount

    """
    Execute arbitrary Pact code via a local call without gas-estimation or signature-verification (e.g. (+ 1 2) or (coin.get-details <account>)).
    """
    pactQuery(pactQuery: [PactQuery!]!): [PactQueryResponse!]!

    transaction(
        blockHash: String
        minimumDepth: Int
        requestKey: String!
    ): Transaction

    transactions(
        accountName: String
        after: String
        before: String
        blockHash: String
        chainId: String
        first: Int = 20
        fungibleName: String
        last: Int = 20
        maxHeight: Int
        minHeight: Int
        minimumDepth: Int
        requestKey: String
    ): QueryTransactionsConnection!

    transactionsByPublicKey(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
        publicKey: String!
    ): QueryTransactionsByPublicKeyConnection!

    transfers(
        accountName: String
        after: String
        before: String
        blockHash: String
        chainId: String
        first: Int = 20
        fungibleName: String
        last: Int = 20
        requestKey: String
    ): QueryTransfersConnection!
}

type FungibleAccount implements Node {
    id: ID!
    accountName: String!
    chainAccounts: [FungibleChainAccount!]!
    fungibleName: String!
    totalBalance: Decimal!
    transactions(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): FungibleAccountTransactionsConnection!

    transfers(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): FungibleAccountTransfersConnection!
}

type FungibleAccountTransactionsConnection {
    edges: [FungibleAccountTransactionsConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FungibleAccountTransactionsConnectionEdge {
    cursor: String!
    node: Transaction!
}

type FungibleAccountTransfersConnection {
    edges: [FungibleAccountTransfersConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FungibleAccountTransfersConnectionEdge {
    cursor: String!
    node: Transfer!
}

type NonFungibleChainAccount implements Node {
    id: ID!
    accountName: String!
    chainId: String!
    nonFungibleTokenBalances: [NonFungibleTokenBalance!]!

    transactions(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): NonFungibleChainAccountTransactionsConnection!
}

type QueryCompletedBlockHeightsConnection {
    edges: [QueryCompletedBlockHeightsConnectionEdge]!
    pageInfo: PageInfo!
}

type QueryCompletedBlockHeightsConnectionEdge {
    cursor: String!
    node: Block!
}

type NonFungibleTokenBalance implements Node {
    accountName: String!
    balance: Int!
    chainId: String!
    id: ID!
    info: NonFungibleToken
    tokenId: String!
    version: String!
}

type NonFungibleToken {
    precision: Int!
    supply: Int!
    uri: String!
}

type QueryTransactionsByPublicKeyConnection {
    edges: [QueryTransactionsByPublicKeyConnectionEdge]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type QueryEventsConnection {
    edges: [QueryEventsConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type QueryEventsConnectionEdge {
    cursor: String!
    node: Event!
}

type QueryTransactionsByPublicKeyConnectionEdge {
    cursor: String!
    node: Transaction!
}

type QueryBlocksFromHeightConnection {
    edges: [QueryBlocksFromHeightConnectionEdge]!
    pageInfo: PageInfo!
}

type QueryBlocksFromHeightConnectionEdge {
    cursor: String!
    node: Block!
}

type QueryBlocksFromDepthConnection {
    edges: [QueryBlocksFromDepthConnectionEdge]!
    pageInfo: PageInfo!
}

type QueryBlocksFromDepthConnectionEdge {
    cursor: String!
    node: Block!
}

type QueryTransactionsConnection {
    edges: [QueryTransactionsConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type QueryTransactionsConnectionEdge {
    cursor: String!
    node: Transaction!
}

type QueryTransfersConnection {
    edges: [QueryTransfersConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type QueryTransfersConnectionEdge {
    cursor: String!
    node: Transfer!
}

# The Block type which implements the Node interface
type Block implements Node {
    id: ID!
    hash: String!
    chainId: BigInt!
    creationTime: DateTime!
    difficulty: BigInt
    epoch: DateTime!
    flags: Decimal!
    height: BigInt!
    nonce: Decimal!
    payloadHash: String!
    weight: String!
    target: String!
    neighbors: [BlockNeighbor!]!
    powHash: String!

    parent: Block
    events(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): BlockEventsConnection!
    minerAccount: FungibleChainAccount!
    transactions(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): BlockTransactionsConnection!
}

# Interface representing a node with an ID
interface Node {
    id: ID!
}

# The neighbor of a block.
type BlockNeighbor {
    chainId: String!
    hash: String!
}

type BlockEventsConnection {
    edges: [BlockEventsConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type BlockEventsConnectionEdge {
    cursor: String!
    node: Event!
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Event implements Node {
    id: ID!
    name: String
    block: Block!
    chainId: BigInt!

    height: BigInt!
    moduleName: String!

    orderIndex: BigInt!
    requestKey: String!
    parameters: String
    qualifiedName: String!

    transaction: Transaction
}

# A fungible specific chain-account.
type FungibleChainAccount implements Node {
    id: ID!
    accountName: String!
    balance: Float!
    chainId: String!
    fungibleName: String!

    transactions(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): FungibleChainAccountTransactionsConnection!

    transfers(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): FungibleChainAccountTransfersConnection!
}

type FungibleChainAccountTransactionsConnection {
    edges: [FungibleChainAccountTransactionsConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FungibleChainAccountTransactionsConnectionEdge {
    cursor: String!
    node: Transaction!
}

type BlockTransactionsConnection {
    edges: [BlockTransactionsConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type BlockTransactionsConnectionEdge {
    cursor: String!
    node: Transaction!
}

type Transaction {
    id: ID!
    cmd: TransactionCommand!
    hash: String!
    result: TransactionInfo!
    sigs: [TransactionSignature!]!
    orphanedTransactions: [Transaction]
}

type Transaction implements Node {
    id: ID!
    cmd: TransactionCommand!
    hash: String!
    result: TransactionInfo!
    sigs: [TransactionSignature!]!
}

type TransactionCommand {
    meta: TransactionMeta!
    """
    The network id of the environment.
    """
    networkId: String!
    nonce: String!
    payload: TransactionPayload!

    signers: [Signer!]!
}

type TransactionMeta {
    chainId: BigInt!
    creationTime: DateTime!
    gasLimit: BigInt!
    gasPrice: Float!
    sender: String!
    ttl: BigInt!
}

union TransactionPayload = ContinuationPayload | ExecutionPayload

union TransactionInfo = TransactionMempoolInfo | TransactionResult

# List of capabilities associated with/installed by this signer.
type TransactionSignature {
    sig: String!
}

type ContinuationPayload {
    # The environment data made available to the transaction. Formatted as raw JSON.
    data: String!
    # A unique id when a pact (defpact) is initiated. See the "Pact execution scope and pact-id" explanation in the docs for more information.
    pactId: String
    # The proof provided to continue the cross-chain transaction.
    proof: String
    # Whether or not this transaction can be rolled back.
    rollback: Boolean
    # The step-number when this is an execution of a `defpact`, aka multi-step transaction.
    step: Int
}

# The payload of an exec transaction.
type ExecutionPayload {
    # The Pact expressions executed in this transaction when it is an `exec` transaction.
    code: String
    # The environment data made available to the transaction. Formatted as raw JSON.
    data: String!
}

# The mempool information
type TransactionMempoolInfo {
    # The status of the mempool.
    status: String
}

# The result of a transaction.
type TransactionResult {
    # The transaction result when it was successful. Formatted as raw JSON.
    badResult: String

    # The JSON stringified continuation in the case that it is a continuation.
    continuation: String
    eventCount: BigInt

    gas: BigInt!

    # The transaction result when it was successful. Formatted as raw JSON.
    goodResult: String

    # The height of the block this transaction belongs to.
    height: BigInt!

    # Identifier to retrieve the logs for the execution of the transaction.
    logs: String
    transactionId: BigInt

    block: Block!

    transfers(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): TransactionResultTransfersConnection!

    events(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): TransactionResultEventsConnection!
}

type TransactionResultEventsConnection {
    edges: [TransactionResultEventsConnectionEdge]!
    pageInfo: PageInfo!

    # used as parameter for the `totalCount` field
    transactionId: String!
    totalCount: Int!
}

type TransactionResultEventsConnectionEdge {
    cursor: String!
    node: Event!
}

type TransactionResultTransfersConnection {
    edges: [TransactionResultTransfersConnectionEdge]!
    pageInfo: PageInfo!
    totalCount: Int!

    # used as parameter for the `totalCount` field
    transactionId: String
}

type TransactionResultTransfersConnectionEdge {
    cursor: String!
    node: Transfer!
}

# A signer for a specific transaction.
type Signer implements Node {
    # The signer for the gas.
    address: String
    id: ID!
    orderIndex: Int
    pubkey: String!

    # The signature scheme that was used to sign.
    scheme: String

    clist: [TransactionCapability!]!
}

# List of capabilities associated with/installed by this signer.
type TransactionCapability {
    args: String!
    name: String!
}

type FungibleChainAccountTransfersConnection {
    edges: [FungibleChainAccountTransfersConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FungibleChainAccountTransfersConnectionEdge {
    cursor: String!
    node: Transfer!
}

type Transfer implements Node {
    amount: Decimal!
    block: Block!

    # The counterpart of the crosschain-transfer. `null` when it is not a cross-chain-transfer.
    crossChainTransfer: Transfer
    id: ID!
    moduleName: String!

    # The order of the transfer when it is a `defpact` (multi-step transaction) execution.
    orderIndex: BigInt!
    receiverAccount: String!
    senderAccount: String!

    # The transaction that initiated this transfer.
    transaction: Transaction
}

# General information about the graph and chainweb-data.
type GraphConfiguration {
    """
    The lowest block-height that is indexed in this endpoint.
    """
    minimumBlockHeight: BigInt
}

"""
Information about the network.
"""
type NetworkInfo {
    """
    The version of the API.
    """
    apiVersion: String!

    """
    The number of circulating coins.
    """
    coinsInCirculation: Float!

    """
    The network hash rate.
    """
    networkHashRate: Float!

    """
    The host of the network.
    """
    networkHost: String!

    """
    The ID of the network.
    """
    networkId: String!

    """
    The total difficulty.
    """
    totalDifficulty: Float!

    """
    The total number of transactions.
    """
    transactionCount: Int!

    nodeBlockDelay: Int!
    nodeChains: [String!]!
    numberOfChains: Int!
    genesisHeights: [GenesisHeight!]!
    nodePackageVersion: String!
    nodeServiceDate: DateTime!
    nodeLatestBehaviorHeight: Int!
}

type GenesisHeight {
    chainId: String!
    height: Int!
}

input PactQuery {
    chainId: String!
    code: String!
    data: [PactQueryData!]
}

input PactQueryData {
    key: String!
    value: String!
}

"""
Information related to a token.
"""
type PactQueryResponse {
    chainId: String!
    code: String!
    error: String
    result: String
    status: String!
}

type GasLimitEstimation {
    amount: Int!
    inputType: String!
    transaction: String!
    usedPreflight: Boolean!
    usedSignatureVerification: Boolean!
}

"""
A non-fungible-specific account.
"""
type NonFungibleAccount implements Node {
    accountName: String!
    id: ID!
    nonFungibleTokenBalances: [NonFungibleTokenBalance!]!

    """
    Default page size is 20. Note that custom token related transactions are not included.
    """
    transactions(
        after: String
        before: String
        first: Int = 20
        last: Int = 20
    ): NonFungibleAccountTransactionsConnection!
}

type NonFungibleAccountTransactionsConnection {
    edges: [NonFungibleAccountTransactionsConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type NonFungibleAccountTransactionsConnectionEdge {
    cursor: String!
    node: Transaction!
}

type NonFungibleChainAccountTransactionsConnection {
    edges: [NonFungibleChainAccountTransactionsConnectionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type NonFungibleChainAccountTransactionsConnectionEdge {
    cursor: String!
    node: Transaction!
}
